const checkResultWithExpectedData = (result, expected) => {
  expect(result.delay).toBe(expected.delay);
  expect(result.duration).toBe(expected.duration);
  // expect(result.keyframes.length).toBe(expected.keyframes.length);
  for (let i = 0; i < result.keyframes.length; i++) {
    expect(result.keyframes[i]).toBeCloseTo(expected.keyframes[i], 5);
  }
};

const expectedData = {
  linear: {
    delay: 0,
    duration: 1000,
    keyframes: [
      0,
      0.016667,
      0.033334,
      0.050001000000000004,
      0.066668,
      0.083335,
      0.10000200000000001,
      0.11666900000000001,
      0.133336,
      0.150003,
      0.16666999999999998,
      0.18333699999999997,
      0.20000399999999996,
      0.21667099999999995,
      0.23333799999999993,
      0.2500049999999999,
      0.2666719999999999,
      0.2833389999999999,
      0.3000059999999999,
      0.31667299999999987,
      0.33333999999999986,
      0.35000699999999985,
      0.36667399999999983,
      0.3833409999999998,
      0.4000079999999998,
      0.4166749999999998,
      0.4333419999999998,
      0.45000899999999977,
      0.46667599999999976,
      0.48334299999999975,
      0.5000099999999997,
      0.5166769999999997,
      0.5333439999999997,
      0.5500109999999997,
      0.5666779999999997,
      0.5833449999999997,
      0.6000119999999997,
      0.6166789999999996,
      0.6333459999999996,
      0.6500129999999996,
      0.6666799999999996,
      0.6833469999999996,
      0.7000139999999996,
      0.7166809999999996,
      0.7333479999999996,
      0.7500149999999995,
      0.7666819999999995,
      0.7833489999999995,
      0.8000159999999995,
      0.8166829999999995,
      0.8333499999999995,
      0.8500169999999995,
      0.8666839999999995,
      0.8833509999999994,
      0.9000179999999994,
      0.9166849999999994,
      0.9333519999999994,
      0.9500189999999994,
      0.9666859999999994,
      0.9833529999999994,
      1,
    ],
  },
  easeIn: {
    delay: 0,
    duration: 1000,
    keyframes: [
      0,
      0.0005152409639897288,
      0.0020240443775474425,
      0.004474789630919504,
      0.007820382215760044,
      0.012017723468821582,
      0.017027258023296743,
      0.022812585513694167,
      0.029340125752351252,
      0.03657882867388339,
      0.04449992197345399,
      0.05307669065246538,
      0.06228428371025211,
      0.07209954404181508,
      0.08250085826426024,
      0.09346802373240494,
      0.10498213044307497,
      0.11702545588808512,
      0.12958137121345767,
      0.14263425728936996,
      0.1561694295013221,
      0.17017307024576794,
      0.18463216825910106,
      0.1995344640323756,
      0.21486840066947474,
      0.2306230796368901,
      0.2467882209315468,
      0.26335412726145035,
      0.280311651894268,
      0.2976521698829286,
      0.31536755242642595,
      0.33345014416957053,
      0.3518927432887915,
      0.37068858425352824,
      0.38983132319571195,
      0.4093150258649026,
      0.4291341581957145,
      0.44928357956961124,
      0.46975853891803887,
      0.49055467389226093,
      0.5116680134228135,
      0.5330949841159763,
      0.5548324210974093,
      0.5768775841304669,
      0.5992281801332676,
      0.6218823936317565,
      0.6448389272741619,
      0.6680970553890531,
      0.6916566948489985,
      0.7155184994675241,
      0.7396839872731849,
      0.7641557151275689,
      0.788937523943065,
      0.814034893620578,
      0.8394554772891426,
      0.865209947615692,
      0.8913134327676764,
      0.9177881995407916,
      0.9446694553802881,
      0.9720215471460691,
      1,
    ],
  },
  easeOut: {
    delay: 0,
    duration: 1000,
    keyframes: [
      0,
      0.028011602156388538,
      0.05536306590744888,
      0.08224380421602893,
      0.10871810787197823,
      0.13482116268973338,
      0.160575224383152,
      0.18599541452248522,
      0.2110924014512309,
      0.23587383526519232,
      0.2603451936239793,
      0.28451031571369934,
      0.3083717570196088,
      0.33193103443992256,
      0.3551888008353454,
      0.37814497225632493,
      0.40079882230694813,
      0.42314905298458577,
      0.4451938482200558,
      0.4669309143784238,
      0.48835751070140904,
      0.5094704718159524,
      0.5302662238455959,
      0.5507407952483373,
      0.5708898232081702,
      0.5907085561902273,
      0.6101918531067687,
      0.6293341794167849,
      0.6481296003844855,
      0.6665717716435525,
      0.6846539271491692,
      0.7023688645443951,
      0.7197089279183952,
      0.7366659878889744,
      0.7532314188989023,
      0.7693960735730804,
      0.7851502539402448,
      0.8004836792773301,
      0.8153854502855192,
      0.8298440092530229,
      0.8438470957992869,
      0.857381697726976,
      0.8704339964297978,
      0.8829893062137583,
      0.8950320067840961,
      0.9065454680266272,
      0.9175119660665496,
      0.9279125894149752,
      0.9377271338074123,
      0.9469339840914223,
      0.9555099812230587,
      0.9634302720711302,
      0.9706681392891702,
      0.9771948079770646,
      0.9829792251914895,
      0.9879878075426465,
      0.9921841510895187,
      0.9955286964578,
      0.9979783404745988,
      0.9994859835351986,
      1,
    ],
  },
  easeInEaseOut: {
    delay: 0,
    duration: 1000,
    keyframes: [
      0,
      0.0005288750046404294,
      0.0021311647661759517,
      0.00482994493454788,
      0.008647547242943632,
      0.01360530421381747,
      0.01972325804523573,
      0.027019831103969993,
      0.03551145587815384,
      0.04521216290200402,
      0.056133126109538016,
      0.06828216635568603,
      0.08166321551015414,
      0.09627574561971083,
      0.11211417016646516,
      0.12916722741041792,
      0.14741735913724616,
      0.16684010172224217,
      0.18740351008369716,
      0.20906763857068955,
      0.23178410576990358,
      0.25549577221658804,
      0.28013656061130987,
      0.3056314469407964,
      0.3318966475140518,
      0.35884002113683633,
      0.3863616974628906,
      0.41435493226459613,
      0.44270717855334496,
      0.4713013500327441,
      0.5000172413793055,
      0.5287330594917183,
      0.557327012227719,
      0.585678897106036,
      0.6136716324533582,
      0.6411926775224787,
      0.6681352957337007,
      0.6943996255477957,
      0.7198935354685346,
      0.7445332521198162,
      0.7682437621535101,
      0.7909589990375527,
      0.8126218339558108,
      0.8331838958363652,
      0.8526052489092065,
      0.8708539573952634,
      0.8879055663102102,
      0.903742525364632,
      0.9183535800015806,
      0.9317331501404732,
      0.9438807135338559,
      0.9548002070538152,
      0.964499455892518,
      0.9729896377011571,
      0.9802847861601924,
      0.986401336384004,
      0.9913577128965911,
      0.9951739596339272,
      0.9978714104845166,
      0.9994723982203298,
      1,
    ],
  },
};

const RE = require("../layout-animation-re/src/index");

describe("ReasonML Keyframe Generator", () => {
  const { generateKeyframes, EasingType } = RE;

  test("linear", () => {
    const keyframeResult = generateKeyframes(EasingType.linear, 0, 1000);
    checkResultWithExpectedData(keyframeResult, expectedData.linear);
  });

  test("easeIn", () => {
    const keyframeResult = generateKeyframes(EasingType.easeIn, 0, 1000);
    checkResultWithExpectedData(keyframeResult, expectedData.easeIn);
  });

  test("easeOut", () => {
    const keyframeResult = generateKeyframes(EasingType.easeOut, 0, 1000);
    checkResultWithExpectedData(keyframeResult, expectedData.easeOut);
  });

  test("easeInEaseOut", () => {
    const keyframeResult = generateKeyframes(EasingType.easeInEaseOut, 0, 1000);
    checkResultWithExpectedData(keyframeResult, expectedData.easeInEaseOut);
  });
});

const JS = require("../layout-animation-js/lib/KeyframeGenerator");

describe("JS Keyframe Generator", () => {
  const { generateKeyframes, EasingType } = JS;

  test("linear", () => {
    const keyframeResult = generateKeyframes(EasingType.linear, 0, 1000);
    expect(keyframeResult).toEqual(expectedData.linear);
  });

  test("easeIn", () => {
    const keyframeResult = generateKeyframes(EasingType.easeIn, 0, 1000);
    expect(keyframeResult).toEqual(expectedData.easeIn);
  });

  test("easeOut", () => {
    const keyframeResult = generateKeyframes(EasingType.easeOut, 0, 1000);
    expect(keyframeResult).toEqual(expectedData.easeOut);
  });

  test("easeInEaseOut", () => {
    const keyframeResult = generateKeyframes(EasingType.easeInEaseOut, 0, 1000);
    expect(keyframeResult).toEqual(expectedData.easeInEaseOut);
  });
});
